CREATE DATABASE OLIST  
ON PRIMARY  -- DEFINE QUE O ARQUIVO PRINCIPAL DO BANCO SERÁ CRIADO  
(  
    NAME = OLIST,  -- NOME LÓGICO DO BANCO DE DADOS  
    FILENAME = 'C:\SQL_SERVER\BASE.MDF',  -- CAMINHO E NOME DO ARQUIVO FÍSICO DO BANCO  
    SIZE = 6MB,  -- TAMANHO INICIAL DO ARQUIVO  
    FILEGROWTH = 2MB  -- CRESCIMENTO DO ARQUIVO EM INCREMENTOS DE 2MB  
)  
LOG ON  -- DEFINE O ARQUIVO DE LOG DO BANCO DE DADOS  
(  
    NAME = OLIST_LOG,  -- NOME LÓGICO DO ARQUIVO DE LOG  
    FILENAME = 'C:\SQL_SERVER\BASE.LDF',  -- CAMINHO E NOME DO ARQUIVO DE LOG  
    SIZE = 10MB,  -- TAMANHO INICIAL DO ARQUIVO DE LOG  
    MAXSIZE = 50MB,  -- TAMANHO MÁXIMO QUE O ARQUIVO DE LOG PODE ATINGIR  
    FILEGROWTH = 5MB  -- CRESCIMENTO DO ARQUIVO DE LOG EM INCREMENTOS DE 5MB  
);  
GO  


/*VERIFICAR SE O BANCO FOI CRIADO */
EXEC SP_DATABASES;


/*CONECTANDO AO BANCO */
USE OLIST;


/* TABELAS PARA SER CRIADAS */

OLIST_PRODUCTS; 
OLIST_CUSTOMERS; 
OLIST_GEOLOCATION; 
OLIST_SELLERS;
OLIST_ORDERS;
OLIST_ORDER_PAYMENTS; 
OLIST_ORDER_REVIEWS; 
OLIST_ORDER_ITEMS;




-- TABELA DE PRODUTOS
   CREATE TABLE TB_OLIST_PRODUCTS (
    PRODUCT_ID VARCHAR(150) PRIMARY KEY,
    PRODUCT_CATEGORY_NAME VARCHAR(MAX),
    PRODUCT_NAME_LENGHT VARCHAR(MAX),
    PRODUCT_DESCRIPTION_LENGHT VARCHAR(MAX),
    PRODUCT_PHOTOS_QTY VARCHAR(MAX),
    PRODUCT_WEIGHT_G VARCHAR(MAX),
    PRODUCT_LENGTH_CM VARCHAR(MAX),
    PRODUCT_HEIGHT_CM VARCHAR(MAX),
    PRODUCT_WIDTH_CM VARCHAR(MAX)
);



-- TABELA DE CLIENTES
   CREATE TABLE TB_OLIST_CUSTOMERS (
    CUSTOMER_ID VARCHAR(150) PRIMARY KEY,           
    CUSTOMER_UNIQUE_ID VARCHAR(150),               
    CUSTOMER_ZIP_CODE_PREFIX VARCHAR(MAX),          
    CUSTOMER_CITY VARCHAR(MAX),                    
    CUSTOMER_STATE VARCHAR(MAX)
);

-- TABELA DE GEOLOCALIZAÇÃO
CREATE TABLE TB_OLIST_GEOLOCATION (
    GEOLOCATION_ZIP_CODE_PREFIX VARCHAR(150),
    GEOLOCATION_LAT VARCHAR(MAX), 
    GEOLOCATION_LNG VARCHAR(MAX),
    GEOLOCATION_CITY VARCHAR(MAX),
    GEOLOCATION_STATE VARCHAR(MAX)
);




-- TABELA DE VENDEDORES
    CREATE TABLE TB_OLIST_SELLERS (
    SELLER_ID VARCHAR(150) PRIMARY KEY,
    SELLER_ZIP_CODE_PREFIX VARCHAR(MAX),
    SELLER_CITY VARCHAR(MAX),
    SELLER_STATE VARCHAR(MAX)
);



  -- TABELA DE PEDIDOS
    CREATE TABLE TB_OLIST_ORDERS (
    ORDER_ID VARCHAR(150) PRIMARY KEY,
    CUSTOMER_ID VARCHAR(150),
    ORDER_STATUS VARCHAR(255),
    ORDER_PURCHASE_TIMESTAMP VARCHAR(MAX),
    ORDER_APPROVED_AT VARCHAR(MAX),
    ORDER_DELIVERED_CARRIER_DATE VARCHAR(MAX),
    ORDER_DELIVERED_CUSTOMER_DATE VARCHAR(MAX),
    ORDER_ESTIMATED_DELIVERY_DATE VARCHAR(MAX),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES TB_OLIST_CUSTOMERS(CUSTOMER_ID)
);


-- TABELA DE PAGAMENTOS
CREATE TABLE TB_OLIST_ORDER_PAYMENTS (
    ORDER_ID VARCHAR(150),                              
    PAYMENT_SEQUENTIAL VARCHAR(MAX),                    
    PAYMENT_TYPE VARCHAR(MAX),                           
    PAYMENT_INSTALLMENTS VARCHAR(MAX),                   
    PAYMENT_VALUE VARCHAR(MAX),
    FOREIGN KEY (ORDER_ID) REFERENCES TB_OLIST_ORDERS(ORDER_ID)
);

-- TABELA DE AVALIAÇÕES DOS PEDIDOS
CREATE TABLE TB_OLIST_ORDER_REVIEWS (
    REVIEW_ID VARCHAR(150) PRIMARY KEY,
    ORDER_ID VARCHAR(150),
    REVIEW_SCORE VARCHAR(MAX),
    REVIEW_COMMENT_TITLE VARCHAR(MAX),
    REVIEW_COMMENT_MESSAGE VARCHAR(MAX),
    REVIEW_CREATION_DATE VARCHAR(MAX),
    REVIEW_ANSWER_TIMESTAMP VARCHAR(MAX),
    FOREIGN KEY (ORDER_ID) REFERENCES TB_OLIST_ORDERS(ORDER_ID)
);



-- TABELA DE ITENS DOS PEDIDOS
CREATE TABLE TB_OLIST_ORDER_ITEMS (
    ORDER_ID VARCHAR(150),                             
    ORDER_ITEM_ID VARCHAR(150),                         
    PRODUCT_ID VARCHAR(150),                            
    SELLER_ID VARCHAR(150),                             
    SHIPPING_LIMIT_DATE VARCHAR(MAX),                  
    PRICE VARCHAR(MAX),                                
    FREIGHT_VALUE VARCHAR(MAX),                        
    PRIMARY KEY (ORDER_ID, ORDER_ITEM_ID),             
    FOREIGN KEY (ORDER_ID) REFERENCES TB_OLIST_ORDERS(ORDER_ID),  
    FOREIGN KEY (PRODUCT_ID) REFERENCES TB_OLIST_PRODUCTS(PRODUCT_ID),  
    FOREIGN KEY (SELLER_ID) REFERENCES TB_OLIST_SELLERS(SELLER_ID)  
);


/* VERIFICANDO AS TABELAS */
SELECT * FROM TB_OLIST_ORDER_ITEMS
SELECT * FROM TB_OLIST_ORDER_PAYMENTS
SELECT * FROM TB_OLIST_ORDER_REVIEWS
SELECT * FROM TB_OLIST_ORDERS
SELECT * FROM TB_OLIST_PRODUCTS
SELECT * FROM TB_OLIST_SELLERS 
SELECT * FROM TB_OLIST_CUSTOMERS
SELECT * FROM TB_OLIST_GEOLOCATION
GO


-- COMANDO BULK INSERT PARA CARREGAR DADOS DO ARQUIVO CSV NA TABELA TB_OLIST_ORDERS
BULK INSERT TB_OLIST_ORDERS
FROM 'C:\SQL_SERVER\base\planilhas\olist_orders_dataset.csv' -- CAMINHO DO ARQUIVO CSV
WITH (
    FIRSTROW = 2,  -- INICIAR A LEITURA DOS DADOS A PARTIR DA SEGUNDA LINHA (IGNORA O CABEÇALHO)
    
    FIELDTERMINATOR = ',',  -- DEFINE QUE OS CAMPOS NO ARQUIVO CSV SÃO SEPARADOS POR VÍRGULA (',')
    
    ROWTERMINATOR = '0x0A',  -- DEFINE QUE A QUEBRA DE LINHA É NO FORMATO UNIX (LF - LINE FEED), 
                             -- O QUE AJUDA A EVITAR ERROS DE FORMATAÇÃO EM SISTEMAS QUE USAM A QUEBRA DE LINHA UNIX.
                             -- '0x0A' CORRESPONDE AO CARACTERE DE QUEBRA DE LINHA UNIX.

    TABLOCK -- UTILIZA BLOQUEIO DE TABELA DURANTE A OPERAÇÃO DE IMPORTAÇÃO PARA AUMENTAR A EFICIÊNCIA.
            -- ISSO MELHORA A PERFORMANCE EM OPERAÇÕES DE INSERÇÃO DE GRANDE VOLUME DE DADOS,
            -- MAS PODE REDUZIR A CONCORRÊNCIA DURANTE A EXECUÇÃO DO COMANDO.
);
GO  -- EXECUTA O COMANDO.




/*CRIANDO TABELAS PARA PRODUÇÃO */
CREATE TABLE TB_FACT_OLIST_GEOLOCATION(
    GEOLOCATION_ZIP_CODE_PREFIX VARCHAR(50),
    GEOLOCATION_LAT VARCHAR(100),
    GEOLOCATION_LNG VARCHAR(100),
    GEOLOCATION_CITY VARCHAR(50),
    GEOLOCATION_STATE VARCHAR(50) 
);

/*COMANDO INSERT INTO PARA INSERIR DADOS DA TABELA TB_OLIST_CUSTOMERS NA TABELA TB_FACT_OLIST_CUSTOMERS */
INSERT INTO TB_FACT_OLIST_CUSTOMERS(
    CUSTOMER_ID,           
    CUSTOMER_UNIQUE_ID,               
    CUSTOMER_ZIP_CODE_PREFIX,          
    CUSTOMER_CITY,                    
    CUSTOMER_STATE 
) 
SELECT 
     CUSTOMER_ID,           
    CUSTOMER_UNIQUE_ID,               
    CUSTOMER_ZIP_CODE_PREFIX,          
    CUSTOMER_CITY,                    
    CUSTOMER_STATE 
FROM dbo.TB_OLIST_CUSTOMERS;

-------------------------------------------------------------------------------------------------------

-- 1. CRIAÇÃO DE UMA VISUALIZAÇÃO GERAL DAS VENDAS
-- ESTA VIEW COMBINA INFORMAÇÕES SOBRE PEDIDOS, CLIENTES, VENDEDORES, PRODUTOS E PAGAMENTOS,
-- FACILITANDO A ANÁLISE GERAL DE VENDAS.

CREATE VIEW VW_VENDAS_GERAL AS
SELECT 
    O.ORDER_ID, -- IDENTIFICADOR ÚNICO DO PEDIDO
    O.ORDER_PURCHASE_TIMESTAMP, -- DATA E HORA DA COMPRA
    C.CUSTOMER_UNIQUE_ID, -- IDENTIFICADOR ÚNICO DO CLIENTE
    S.SELLER_ID, -- IDENTIFICADOR ÚNICO DO VENDEDOR
    P.PRODUCT_ID, -- IDENTIFICADOR ÚNICO DO PRODUTO
    OI.PRICE, -- PREÇO DO PRODUTO
    OI.FREIGHT_VALUE, -- VALOR DO FRETE
    PAY.PAYMENT_TYPE, -- MÉTODO DE PAGAMENTO UTILIZADO
    PAY.PAYMENT_VALUE -- VALOR TOTAL PAGO
FROM TB_FACT_OLIST_ORDERS O
JOIN TB_FACT_OLIST_CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
JOIN TB_FACT_OLIST_ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
JOIN TB_FACT_OLIST_SELLERS S ON OI.SELLER_ID = S.SELLER_ID
JOIN TB_FACT_OLIST_PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
JOIN TB_FACT_OLIST_ORDER_PAYMENTS PAY ON O.ORDER_ID = PAY.ORDER_ID;

-- 2. CRIAÇÃO DE UMA VISUALIZAÇÃO PARA ANÁLISE DE DESEMPENHO DOS VENDEDORES
-- ESTA VIEW PROPORCIONA UMA ANÁLISE DO DESEMPENHO DE CADA VENDEDOR,
-- CALCULANDO O NÚMERO TOTAL DE PEDIDOS E O VALOR TOTAL DE VENDAS E FRETES REALIZADOS POR CADA VENDEDOR.

CREATE VIEW VW_VENDAS_POR_VENDEDOR AS
SELECT 
    OI.SELLER_ID, -- IDENTIFICADOR ÚNICO DO VENDEDOR
    COUNT(DISTINCT OI.ORDER_ID) AS TOTAL_PEDIDOS, -- TOTAL DE PEDIDOS RECEBIDOS PELO VENDEDOR
    SUM(CAST(OI.PRICE AS DECIMAL(10,2))) AS TOTAL_VENDIDO, -- SOMA TOTAL DE VENDAS
    SUM(CAST(OI.FREIGHT_VALUE AS DECIMAL(10,2))) AS TOTAL_FRETE -- SOMA TOTAL DOS FRETES
FROM TB_FACT_OLIST_ORDER_ITEMS OI
GROUP BY OI.SELLER_ID;

-- 3. CRIAÇÃO DE UMA VISUALIZAÇÃO PARA ANÁLISE DO TEMPO MÉDIO DE ENTREGA POR ESTADO
-- ESTA VIEW CALCULA O TEMPO MÉDIO DE ENTREGA POR ESTADO,
-- CONSIDERANDO APENAS OS PEDIDOS QUE FORAM ENTREGUES.

CREATE VIEW VW_TEMPO_ENTREGA_ESTADO AS
SELECT 
    C.CUSTOMER_STATE, -- ESTADO DO CLIENTE
    AVG(DATEDIFF(DAY, O.ORDER_PURCHASE_TIMESTAMP, O.ORDER_DELIVERED_CUSTOMER_DATE)) AS MEDIA_DIAS_ENTREGA -- TEMPO MÉDIO DE ENTREGA EM DIAS
FROM TB_FACT_OLIST_ORDERS O
JOIN TB_FACT_OLIST_CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
WHERE O.ORDER_STATUS = 'DELIVERED' -- FILTRA APENAS PEDIDOS ENTREGUES
  AND O.ORDER_PURCHASE_TIMESTAMP IS NOT NULL
  AND O.ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
GROUP BY C.CUSTOMER_STATE;

-- 4. CRIAÇÃO DE UMA VISUALIZAÇÃO PARA ANÁLISE DE AVALIAÇÕES POR VENDEDOR
-- ESTA VIEW CALCULA A MÉDIA DAS AVALIAÇÕES RECEBIDAS POR CADA VENDEDOR,
-- ALÉM DE CONTAR O NÚMERO DE AVALIAÇÕES REALIZADAS POR CADA VENDEDOR.

CREATE VIEW VW_AVALIACOES_POR_VENDEDOR AS
SELECT 
    OI.SELLER_ID, -- IDENTIFICADOR ÚNICO DO VENDEDOR
    COUNT(R.REVIEW_ID) AS TOTAL_AVALIACOES, -- TOTAL DE AVALIAÇÕES RECEBIDAS
    AVG(R.REVIEW_SCORE) AS MEDIA_AVALIACOES -- MÉDIA DAS AVALIAÇÕES DOS CLIENTES
FROM TB_FACT_OLIST_ORDER_ITEMS OI
JOIN TB_FACT_OLIST_ORDERS O ON OI.ORDER_ID = O.ORDER_ID
JOIN TB_FACT_OLIST_ORDER_REVIEWS R ON O.ORDER_ID = R.ORDER_ID
GROUP BY OI.SELLER_ID;

-- 5. CRIAÇÃO DE UMA VISUALIZAÇÃO PARA ANÁLISE DE MÉTODOS DE PAGAMENTO
-- ESTA VIEW FORNECE INFORMAÇÕES SOBRE A DISTRIBUIÇÃO DOS MÉTODOS DE PAGAMENTO UTILIZADOS,
-- INCLUINDO O NÚMERO TOTAL DE TRANSAÇÕES E O VALOR TOTAL RECEBIDO POR CADA TIPO DE PAGAMENTO.

CREATE VIEW VW_METODOS_PAGAMENTO AS
SELECT 
    PAY.PAYMENT_TYPE, -- TIPO DE PAGAMENTO UTILIZADO
    COUNT(PAY.ORDER_ID) AS TOTAL_TRANSACOES, -- TOTAL DE TRANSAÇÕES REALIZADAS COM CADA MÉTODO
    SUM(PAY.PAYMENT_VALUE) AS TOTAL_RECEBIDO -- TOTAL RECEBIDO POR CADA MÉTODO DE PAGAMENTO
FROM TB_FACT_OLIST_ORDER_PAYMENTS PAY
GROUP BY PAY.PAYMENT_TYPE;

-- PROCESSO PARA EXPORTAR DADOS PARA EXCEL
-- 1. APÓS CRIAR AS VIEWS, EXECUTE AS CONSULTAS PARA OBTER OS DADOS DE CADA VIEW.
-- 2. NO SQL SERVER MANAGEMENT STUDIO (SSMS), CLIQUE COM O BOTÃO DIREITO SOBRE OS RESULTADOS DA CONSULTA E SELECIONE "SAVE RESULTS AS".
-- 3. SELECIONE O FORMATO EXCEL (*.XLSX) E SALVE O ARQUIVO.

-- 6. APÓS EXPORTAÇÃO, ABRA O EXCEL E IMPORTE OS DADOS PARA CRIAR GRÁFICOS E TABELAS DINÂMICAS PARA ANÁLISE.






